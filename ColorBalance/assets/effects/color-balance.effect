CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        shadows_coef: { value: [0.0, 0.0, 0.0, 0.0] }
        midtones_coef: { value: [0.0, 0.0, 0.0, 0.0] }
        highlights_coef: { value: [0.0, 0.0, 0.0, 0.0] }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%

CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Coefs {
    vec4 shadows_coef;
    vec4 midtones_coef;
    vec4 highlights_coef;
  };

  vec4 normalizeCoef(vec4 coef) {
    float maxValue = max(coef.x, max(coef.y, coef.z));
    float midValue = 0.0;
    if (maxValue == coef.x) {
      midValue = max(coef.y, coef.z);
    } else if (maxValue == coef.y) {
      midValue = max(coef.x, coef.z);
    } else {
      midValue = max(coef.x, coef.y);
    }
    coef.xyz -= midValue;
    return coef;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    // 规范化系数
    vec4 shadows_coef_normalized = normalizeCoef(shadows_coef);
    vec4 midtones_coef_normalized = normalizeCoef(midtones_coef);
    vec4 highlights_coef_normalized = normalizeCoef(highlights_coef);

    // 高光
    {
      vec3 highlights_alpha = 0.0039230 * highlights_coef_normalized.rgb;
      mat3 posMatrix = mat3(
        highlights_alpha[0] > 0.0 ? highlights_alpha[0] : 0.0, 0.0, 0.0,
        0.0, highlights_alpha[1] > 0.0 ? highlights_alpha[1] : 0.0, 0.0,
        0.0, 0.0, highlights_alpha[2] > 0.0 ? highlights_alpha[2] : 0.0
      ) * mat3(
        1.0, 0.0, 0.0,
        0.0, 1.0, 0.0,
        0.0, 0.0, 1.0
      );
      mat3 negMatrix = mat3(
        highlights_alpha[0] < 0.0 ? -highlights_alpha[0] : 0.0, 0.0, 0.0,
        0.0, highlights_alpha[1] < 0.0 ? -highlights_alpha[1] : 0.0, 0.0,
        0.0, 0.0, highlights_alpha[2] < 0.0 ? -highlights_alpha[2] : 0.0
      ) * mat3(
        0.0, 1.0, 1.0,
        1.0, 0.0, 1.0,
        1.0, 1.0, 0.0
      );
      mat3 highlights_alpha_matrix = posMatrix + negMatrix;
      highlights_alpha = vec3(
          dot(highlights_alpha_matrix[0], vec3(1.0)),
          dot(highlights_alpha_matrix[1], vec3(1.0)),
          dot(highlights_alpha_matrix[2], vec3(1.0))
      );
      o.rgb = clamp(o.rgb / (1.0 - highlights_alpha), 0.0, 1.0);
    }

    // 阴影
    {
      vec3 shadows_alpha = 0.0039230 * shadows_coef_normalized.rgb;
      mat3 posMatrix = mat3(
        shadows_alpha[0] < 0.0 ? -shadows_alpha[0] : 0.0, 0.0, 0.0,
        0.0, shadows_alpha[1] < 0.0 ? -shadows_alpha[1] : 0.0, 0.0,
        0.0, 0.0, shadows_alpha[2] < 0.0 ? -shadows_alpha[2] : 0.0
      ) * mat3(
        1.0, 0.0, 0.0,
        0.0, 1.0, 0.0,
        0.0, 0.0, 1.0
      );
      mat3 negMatrix = mat3(
        shadows_alpha[0] > 0.0 ? shadows_alpha[0] : 0.0, 0.0, 0.0,
        0.0, shadows_alpha[1] > 0.0 ? shadows_alpha[1] : 0.0, 0.0,
        0.0, 0.0, shadows_alpha[2] > 0.0 ? shadows_alpha[2] : 0.0
      ) * mat3(
        0.0, 1.0, 1.0,
        1.0, 0.0, 1.0,
        1.0, 1.0, 0.0
      );
      mat3 shadows_alpha_matrix = posMatrix + negMatrix;
      shadows_alpha = vec3(
          dot(shadows_alpha_matrix[0], vec3(1.0)),
          dot(shadows_alpha_matrix[1], vec3(1.0)),
          dot(shadows_alpha_matrix[2], vec3(1.0))
      );
      o.rgb = clamp((o.rgb - shadows_alpha) / (1.0 - shadows_alpha), 0.0, 1.0);
    }

    // 中间调
    {
      vec3 tmp_midtones_coef = -0.0033944 * midtones_coef_normalized.rgb;
      mat3 tmpMatrix = mat3(
        tmp_midtones_coef[0], 0.0, 0.0,
        0.0, tmp_midtones_coef[1], 0.0,
        0.0, 0.0, tmp_midtones_coef[2]
      ) * mat3(
        1.0, -1.0, -1.0,
        -1.0, 1.0, -1.0,
        -1.0, -1.0, 1.0
      );
      vec3 midtones_gamma = exp(vec3(
          dot(tmpMatrix[0], vec3(1.0)),
          dot(tmpMatrix[1], vec3(1.0)),
          dot(tmpMatrix[2], vec3(1.0))
      ));
      
      o.rgb = pow(o.rgb, midtones_gamma);
      o.rgb = clamp(o.rgb, 0.0, 1.0);
    }

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
