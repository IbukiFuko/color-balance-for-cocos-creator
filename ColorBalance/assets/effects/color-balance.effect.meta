{
  "ver": "1.0.27",
  "uuid": "7b951e2c-022f-4f50-8862-fe38f704aeb1",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 shadows_coef;\nuniform vec4 midtones_coef;\nuniform vec4 highlights_coef;\nvec4 normalizeCoef(vec4 coef) {\n  float maxValue = max(coef.x, max(coef.y, coef.z));\n  float midValue = 0.0;\n  if (maxValue == coef.x) {\n    midValue = max(coef.y, coef.z);\n  } else if (maxValue == coef.y) {\n    midValue = max(coef.x, coef.z);\n  } else {\n    midValue = max(coef.x, coef.y);\n  }\n  coef.xyz -= midValue;\n  return coef;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec4 shadows_coef_normalized = normalizeCoef(shadows_coef);\n  vec4 midtones_coef_normalized = normalizeCoef(midtones_coef);\n  vec4 highlights_coef_normalized = normalizeCoef(highlights_coef);\n  {\n    vec3 highlights_alpha = 0.0039230 * highlights_coef_normalized.rgb;\n    mat3 posMatrix = mat3(\n      highlights_alpha[0] > 0.0 ? highlights_alpha[0] : 0.0, 0.0, 0.0,\n      0.0, highlights_alpha[1] > 0.0 ? highlights_alpha[1] : 0.0, 0.0,\n      0.0, 0.0, highlights_alpha[2] > 0.0 ? highlights_alpha[2] : 0.0\n    ) * mat3(\n      1.0, 0.0, 0.0,\n      0.0, 1.0, 0.0,\n      0.0, 0.0, 1.0\n    );\n    mat3 negMatrix = mat3(\n      highlights_alpha[0] < 0.0 ? -highlights_alpha[0] : 0.0, 0.0, 0.0,\n      0.0, highlights_alpha[1] < 0.0 ? -highlights_alpha[1] : 0.0, 0.0,\n      0.0, 0.0, highlights_alpha[2] < 0.0 ? -highlights_alpha[2] : 0.0\n    ) * mat3(\n      0.0, 1.0, 1.0,\n      1.0, 0.0, 1.0,\n      1.0, 1.0, 0.0\n    );\n    mat3 highlights_alpha_matrix = posMatrix + negMatrix;\n    highlights_alpha = vec3(\n        dot(highlights_alpha_matrix[0], vec3(1.0)),\n        dot(highlights_alpha_matrix[1], vec3(1.0)),\n        dot(highlights_alpha_matrix[2], vec3(1.0))\n    );\n    o.rgb = clamp(o.rgb / (1.0 - highlights_alpha), 0.0, 1.0);\n  }\n  {\n    vec3 shadows_alpha = 0.0039230 * shadows_coef_normalized.rgb;\n    mat3 posMatrix = mat3(\n      shadows_alpha[0] < 0.0 ? -shadows_alpha[0] : 0.0, 0.0, 0.0,\n      0.0, shadows_alpha[1] < 0.0 ? -shadows_alpha[1] : 0.0, 0.0,\n      0.0, 0.0, shadows_alpha[2] < 0.0 ? -shadows_alpha[2] : 0.0\n    ) * mat3(\n      1.0, 0.0, 0.0,\n      0.0, 1.0, 0.0,\n      0.0, 0.0, 1.0\n    );\n    mat3 negMatrix = mat3(\n      shadows_alpha[0] > 0.0 ? shadows_alpha[0] : 0.0, 0.0, 0.0,\n      0.0, shadows_alpha[1] > 0.0 ? shadows_alpha[1] : 0.0, 0.0,\n      0.0, 0.0, shadows_alpha[2] > 0.0 ? shadows_alpha[2] : 0.0\n    ) * mat3(\n      0.0, 1.0, 1.0,\n      1.0, 0.0, 1.0,\n      1.0, 1.0, 0.0\n    );\n    mat3 shadows_alpha_matrix = posMatrix + negMatrix;\n    shadows_alpha = vec3(\n        dot(shadows_alpha_matrix[0], vec3(1.0)),\n        dot(shadows_alpha_matrix[1], vec3(1.0)),\n        dot(shadows_alpha_matrix[2], vec3(1.0))\n    );\n    o.rgb = clamp((o.rgb - shadows_alpha) / (1.0 - shadows_alpha), 0.0, 1.0);\n  }\n  {\n    vec3 tmp_midtones_coef = -0.0033944 * midtones_coef_normalized.rgb;\n    mat3 tmpMatrix = mat3(\n      tmp_midtones_coef[0], 0.0, 0.0,\n      0.0, tmp_midtones_coef[1], 0.0,\n      0.0, 0.0, tmp_midtones_coef[2]\n    ) * mat3(\n      1.0, -1.0, -1.0,\n      -1.0, 1.0, -1.0,\n      -1.0, -1.0, 1.0\n    );\n    vec3 midtones_gamma = exp(vec3(\n        dot(tmpMatrix[0], vec3(1.0)),\n        dot(tmpMatrix[1], vec3(1.0)),\n        dot(tmpMatrix[2], vec3(1.0))\n    ));\n    o.rgb = pow(o.rgb, midtones_gamma);\n    o.rgb = clamp(o.rgb, 0.0, 1.0);\n  }\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Coefs {\n  vec4 shadows_coef;\n  vec4 midtones_coef;\n  vec4 highlights_coef;\n};\nvec4 normalizeCoef(vec4 coef) {\n  float maxValue = max(coef.x, max(coef.y, coef.z));\n  float midValue = 0.0;\n  if (maxValue == coef.x) {\n    midValue = max(coef.y, coef.z);\n  } else if (maxValue == coef.y) {\n    midValue = max(coef.x, coef.z);\n  } else {\n    midValue = max(coef.x, coef.y);\n  }\n  coef.xyz -= midValue;\n  return coef;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec4 shadows_coef_normalized = normalizeCoef(shadows_coef);\n  vec4 midtones_coef_normalized = normalizeCoef(midtones_coef);\n  vec4 highlights_coef_normalized = normalizeCoef(highlights_coef);\n  {\n    vec3 highlights_alpha = 0.0039230 * highlights_coef_normalized.rgb;\n    mat3 posMatrix = mat3(\n      highlights_alpha[0] > 0.0 ? highlights_alpha[0] : 0.0, 0.0, 0.0,\n      0.0, highlights_alpha[1] > 0.0 ? highlights_alpha[1] : 0.0, 0.0,\n      0.0, 0.0, highlights_alpha[2] > 0.0 ? highlights_alpha[2] : 0.0\n    ) * mat3(\n      1.0, 0.0, 0.0,\n      0.0, 1.0, 0.0,\n      0.0, 0.0, 1.0\n    );\n    mat3 negMatrix = mat3(\n      highlights_alpha[0] < 0.0 ? -highlights_alpha[0] : 0.0, 0.0, 0.0,\n      0.0, highlights_alpha[1] < 0.0 ? -highlights_alpha[1] : 0.0, 0.0,\n      0.0, 0.0, highlights_alpha[2] < 0.0 ? -highlights_alpha[2] : 0.0\n    ) * mat3(\n      0.0, 1.0, 1.0,\n      1.0, 0.0, 1.0,\n      1.0, 1.0, 0.0\n    );\n    mat3 highlights_alpha_matrix = posMatrix + negMatrix;\n    highlights_alpha = vec3(\n        dot(highlights_alpha_matrix[0], vec3(1.0)),\n        dot(highlights_alpha_matrix[1], vec3(1.0)),\n        dot(highlights_alpha_matrix[2], vec3(1.0))\n    );\n    o.rgb = clamp(o.rgb / (1.0 - highlights_alpha), 0.0, 1.0);\n  }\n  {\n    vec3 shadows_alpha = 0.0039230 * shadows_coef_normalized.rgb;\n    mat3 posMatrix = mat3(\n      shadows_alpha[0] < 0.0 ? -shadows_alpha[0] : 0.0, 0.0, 0.0,\n      0.0, shadows_alpha[1] < 0.0 ? -shadows_alpha[1] : 0.0, 0.0,\n      0.0, 0.0, shadows_alpha[2] < 0.0 ? -shadows_alpha[2] : 0.0\n    ) * mat3(\n      1.0, 0.0, 0.0,\n      0.0, 1.0, 0.0,\n      0.0, 0.0, 1.0\n    );\n    mat3 negMatrix = mat3(\n      shadows_alpha[0] > 0.0 ? shadows_alpha[0] : 0.0, 0.0, 0.0,\n      0.0, shadows_alpha[1] > 0.0 ? shadows_alpha[1] : 0.0, 0.0,\n      0.0, 0.0, shadows_alpha[2] > 0.0 ? shadows_alpha[2] : 0.0\n    ) * mat3(\n      0.0, 1.0, 1.0,\n      1.0, 0.0, 1.0,\n      1.0, 1.0, 0.0\n    );\n    mat3 shadows_alpha_matrix = posMatrix + negMatrix;\n    shadows_alpha = vec3(\n        dot(shadows_alpha_matrix[0], vec3(1.0)),\n        dot(shadows_alpha_matrix[1], vec3(1.0)),\n        dot(shadows_alpha_matrix[2], vec3(1.0))\n    );\n    o.rgb = clamp((o.rgb - shadows_alpha) / (1.0 - shadows_alpha), 0.0, 1.0);\n  }\n  {\n    vec3 tmp_midtones_coef = -0.0033944 * midtones_coef_normalized.rgb;\n    mat3 tmpMatrix = mat3(\n      tmp_midtones_coef[0], 0.0, 0.0,\n      0.0, tmp_midtones_coef[1], 0.0,\n      0.0, 0.0, tmp_midtones_coef[2]\n    ) * mat3(\n      1.0, -1.0, -1.0,\n      -1.0, 1.0, -1.0,\n      -1.0, -1.0, 1.0\n    );\n    vec3 midtones_gamma = exp(vec3(\n        dot(tmpMatrix[0], vec3(1.0)),\n        dot(tmpMatrix[1], vec3(1.0)),\n        dot(tmpMatrix[2], vec3(1.0))\n    ));\n    o.rgb = pow(o.rgb, midtones_gamma);\n    o.rgb = clamp(o.rgb, 0.0, 1.0);\n  }\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}